// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Markit;
//
//    var dividends = Dividends.FromJson(jsonString);

namespace MarkitDividend
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Dividends
    {
        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("result")]
        public Result[] Result { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("params")]
        public Params Params { get; set; }

        [JsonProperty("restrictions")]
        public Restrictions Restrictions { get; set; }

        [JsonProperty("apiVersion")]
        public string ApiVersion { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("lic")]
        public long Lic { get; set; }

        [JsonProperty("received")]
        public string Received { get; set; }

        [JsonProperty("node")]
        public string Node { get; set; }

        [JsonProperty("returned")]
        public string Returned { get; set; }
    }

    public partial class Params
    {
        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("startDate")]
        public string StartDate { get; set; }

        [JsonProperty("listingId")]
        public long ListingId { get; set; }

        [JsonProperty("securityId")]
        public long SecurityId { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }
    }

    public partial class User
    {
        [JsonProperty("password")]
        public object Password { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("authorities")]
        public Authority[] Authorities { get; set; }

        [JsonProperty("accountNonExpired")]
        public bool AccountNonExpired { get; set; }

        [JsonProperty("accountNonLocked")]
        public bool AccountNonLocked { get; set; }

        [JsonProperty("credentialsNonExpired")]
        public bool CredentialsNonExpired { get; set; }

        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("licenseID")]
        public long LicenseId { get; set; }

        [JsonProperty("rawData")]
        public RawData RawData { get; set; }
    }

    public partial class Authority
    {
        [JsonProperty("authority")]
        public string AuthorityAuthority { get; set; }
    }

    public partial class RawData
    {
        [JsonProperty("userID")]
        public long UserId { get; set; }

        [JsonProperty("userName")]
        public string UserName { get; set; }

        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [JsonProperty("lastName")]
        public string LastName { get; set; }

        [JsonProperty("password")]
        public string Password { get; set; }

        [JsonProperty("isEnabled")]
        public bool IsEnabled { get; set; }

        [JsonProperty("isAccountLocked")]
        public bool IsAccountLocked { get; set; }

        [JsonProperty("changePasswordNextLogin")]
        public bool ChangePasswordNextLogin { get; set; }

        [JsonProperty("accountExpiryDate")]
        public DateTimeOffset AccountExpiryDate { get; set; }

        [JsonProperty("passwordExpiryDate")]
        public DateTimeOffset PasswordExpiryDate { get; set; }

        [JsonProperty("resetTokenExpiryDate")]
        public object ResetTokenExpiryDate { get; set; }

        [JsonProperty("lastLogin")]
        public long LastLogin { get; set; }

        [JsonProperty("clientLicenseId")]
        public long ClientLicenseId { get; set; }

        [JsonProperty("loginAttempts")]
        public long LoginAttempts { get; set; }

        [JsonProperty("resetToken")]
        public string ResetToken { get; set; }

        [JsonProperty("roles")]
        public object[] Roles { get; set; }
    }

    public partial class Restrictions
    {
    }

    public partial class Result
    {
        [JsonProperty("SecurityID")]
        public long SecurityId { get; set; }

        [JsonProperty("ListingID")]
        public long ListingId { get; set; }

        [JsonProperty("Bloomberg")]
        public string Bloomberg { get; set; }

        [JsonProperty("ExchangeTicker")]
        public string ExchangeTicker { get; set; }

        [JsonProperty("Isin")]
        public string Isin { get; set; }

        [JsonProperty("Cusip")]
        public string Cusip { get; set; }

        [JsonProperty("Ric")]
        public string Ric { get; set; }

        [JsonProperty("ListingCurrency")]
        public CurrencyCode ListingCurrency { get; set; }

        [JsonProperty("MIC")]
        public Mic Mic { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("SecurityType")]
        public SecurityType SecurityType { get; set; }

        [JsonProperty("Sedol")]
        public string Sedol { get; set; }

        [JsonProperty("Other")]
        public string Other { get; set; }

        [JsonProperty("XdDate")]
        public DateTimeOffset? XdDate { get; set; }

        [JsonProperty("DividendType")]
        public DividendType DividendType { get; set; }

        [JsonProperty("Frequency")]
        public object Frequency { get; set; }

        [JsonProperty("CurrencyCode")]
        public CurrencyCode CurrencyCode { get; set; }

        [JsonProperty("GrossAmount")]
        public double? GrossAmount { get; set; }

        [JsonProperty("NetAmount")]
        public double? NetAmount { get; set; }

        [JsonProperty("TaxRate")]
        public double? TaxRate { get; set; }

        [JsonProperty("PayDate")]
        public DateTimeOffset? PayDate { get; set; }

        [JsonProperty("RecordDate")]
        public DateTimeOffset? RecordDate { get; set; }

        [JsonProperty("AnnounceDate")]
        public DateTimeOffset AnnounceDate { get; set; }

        [JsonProperty("ProviderDividendID")]
        public string ProviderDividendId { get; set; }

        [JsonProperty("Health")]
        public long? Health { get; set; }

        [JsonProperty("Year")]
        public object Year { get; set; }

        [JsonProperty("FinancialYearStartDate")]
        public DateTimeOffset FinancialYearStartDate { get; set; }

        [JsonProperty("FinancialYearEndDate")]
        public DateTimeOffset FinancialYearEndDate { get; set; }

        [JsonProperty("UnadjustedAmount")]
        public double? UnadjustedAmount { get; set; }

        [JsonProperty("AGMDate")]
        public DateTimeOffset? AgmDate { get; set; }

        [JsonProperty("DividendForm")]
        public DividendForm DividendForm { get; set; }

        [JsonProperty("IsScripOptional")]
        public long IsScripOptional { get; set; }

        [JsonProperty("TaxJurisdiction")]
        public TaxJurisdiction? TaxJurisdiction { get; set; }

        [JsonProperty("TaxJurisdictionCountryCode")]
        public TaxJurisdictionCountryCode? TaxJurisdictionCountryCode { get; set; }

        [JsonProperty("TaxCode")]
        public TaxCode? TaxCode { get; set; }

        [JsonProperty("Notes")]
        public string Notes { get; set; }

        [JsonProperty("Franking")]
        public object Franking { get; set; }

        [JsonProperty("LoyaltyAmount")]
        public object LoyaltyAmount { get; set; }

        [JsonProperty("ConversionRate")]
        public object ConversionRate { get; set; }

        [JsonProperty("ConversionDate")]
        public object ConversionDate { get; set; }

        [JsonProperty("LastReviewDate")]
        public string LastReviewDate { get; set; }

        [JsonProperty("AmountConfidenceRank")]
        public long? AmountConfidenceRank { get; set; }

        [JsonProperty("XdDateConfidenceRank")]
        public long? XdDateConfidenceRank { get; set; }

        [JsonProperty("ForecastMask")]
        public long ForecastMask { get; set; }

        [JsonProperty("StockRatio")]
        public double? StockRatio { get; set; }

        [JsonProperty("ReportingCurrency")]
        public CurrencyCode? ReportingCurrency { get; set; }

        [JsonProperty("Origin")]
        public Origin Origin { get; set; }

        [JsonProperty("DeclaredDividendAmount")]
        public double? DeclaredDividendAmount { get; set; }

        [JsonProperty("IsAGMAnnounced")]
        public long IsAgmAnnounced { get; set; }

        [JsonProperty("AGMAnnouncementDate")]
        public DateTimeOffset? AgmAnnouncementDate { get; set; }

        [JsonProperty("AGMAnnouncementDatePublishState")]
        public PublishState? AgmAnnouncementDatePublishState { get; set; }

        [JsonProperty("XdDateAnnouncementDate")]
        public DateTimeOffset? XdDateAnnouncementDate { get; set; }

        [JsonProperty("RawNetAmount")]
        public double? RawNetAmount { get; set; }

        [JsonProperty("XdDateAnnouncementDatePublishState")]
        public PublishState? XdDateAnnouncementDatePublishState { get; set; }

        [JsonProperty("DeclaredAmountPublishState")]
        public PublishState? DeclaredAmountPublishState { get; set; }

        [JsonProperty("FXRate")]
        public double? FxRate { get; set; }

        [JsonProperty("FXRateAnnouncementDate")]
        public DateTimeOffset? FxRateAnnouncementDate { get; set; }

        [JsonProperty("DeclaredDividendAmountAdjusted")]
        public double? DeclaredDividendAmountAdjusted { get; set; }

        [JsonProperty("AnnouncementPublishState")]
        public PublishState AnnouncementPublishState { get; set; }

        [JsonProperty("PayDatePublishState")]
        public PublishState PayDatePublishState { get; set; }

        [JsonProperty("AmountPublishState")]
        public PublishState AmountPublishState { get; set; }

        [JsonProperty("AGMDatePublishState")]
        public PublishState? AgmDatePublishState { get; set; }

        [JsonProperty("XdDatePublishState")]
        public PublishState XdDatePublishState { get; set; }

        [JsonProperty("RecordDatePublishState")]
        public PublishState RecordDatePublishState { get; set; }

        [JsonProperty("FXRatePublishState")]
        public PublishState? FxRatePublishState { get; set; }

        [JsonProperty("PredictionIntervalLo80")]
        public double? PredictionIntervalLo80 { get; set; }

        [JsonProperty("PredictionIntervalHi80")]
        public double? PredictionIntervalHi80 { get; set; }

        [JsonProperty("PredictionIntervalLo95")]
        public double? PredictionIntervalLo95 { get; set; }

        [JsonProperty("PredictionIntervalHi95")]
        public double? PredictionIntervalHi95 { get; set; }

        [JsonProperty("MeanAbsolutePercentageError")]
        public double? MeanAbsolutePercentageError { get; set; }

        [JsonProperty("Methodology")]
        public Methodology? Methodology { get; set; }

        [JsonProperty("ListingAmountCurrencyCode")]
        public CurrencyCode? ListingAmountCurrencyCode { get; set; }

        [JsonProperty("ListingGrossAmount")]
        public double? ListingGrossAmount { get; set; }

        [JsonProperty("ListingRawGrossAmount")]
        public double? ListingRawGrossAmount { get; set; }

        [JsonProperty("ListingRawGrossAmountPublishState")]
        public PublishState? ListingRawGrossAmountPublishState { get; set; }

        [JsonProperty("ListingNetAmount")]
        public double? ListingNetAmount { get; set; }

        [JsonProperty("ListingRawNetAmount")]
        public double? ListingRawNetAmount { get; set; }

        [JsonProperty("ListingDeclaredAmountAdjusted")]
        public double? ListingDeclaredAmountAdjusted { get; set; }

        [JsonProperty("ListingDeclaredAmount")]
        public double? ListingDeclaredAmount { get; set; }

        [JsonProperty("ListingDeclaredAmountPublishState")]
        public PublishState? ListingDeclaredAmountPublishState { get; set; }

        [JsonProperty("IsAnnounced")]
        public long IsAnnounced { get; set; }
    }

    public enum PublishState { Company, Estimate, Markit, Proposed };

    public enum CurrencyCode { Aed, Ats,Ars, Aud, Bef,Bhd , Brl, Cad, Chf, Clp, Cnh, Cny, Cop, Czk, Dem, Dkk, Egp, Esp, Eur, Fim, Frf, Gbp, Gbx, Gel, Grd, Hkd, Huf, Idr, Iep, Ila, Ils, Inr, Isk, Itl, Jpy, Krw,Kwf,Kwd, Kzt, Luf, Mxn, Myr, Nlg, Nok, Nzd, Pen, Php, Pkr, Pln, Pte, Qar,Ron, Rub, Rmb, Sar, Sek, Sgd, Thb, Try, Twd, Usd, Uyu, Xxx, Zac, Zar };

    public enum DividendForm { Cash, Stock };

    public enum DividendType { Cond, Cr, Cr10, Cr11, Cr12, Cr2, Cr3, Cr4, Cr5, Cr6, Cr7, Cr8, Cr9, CrFin, CrInt, Fin, FinPid, FinSo, Int, IntPid, M01, M01Pid, M02, M02Pid, M03, M03Pid, M04, M04Pid, M05, M05Pid, M06, M06Pid, M07, M07Pid, M08, M08Pid, M09, M09Pid, M10, M10Pid, M11, M11Pid, M12, M12Pid, Q1, Q1Pid, Q2, Q2Pid, Q3, Q3Pid, Q4, Q4Pid, Spec,SpecSo,SpecPid, Spec2Nd, Spec3Rd,Spec4th, The2NdInt, The2NdIntPid, The3RdInt, The3RdIntPid, The4ThInt, The4ThIntPid, The5ThInt, COND2ND, Yr,Q4SO, SPEC5TH , THE5THINTPID };

    public enum Methodology { Bayesianregression, GrowthCap, Guidance, Implicit, Interim, Lastval, NA, PRconhEps, PRlastEps, Timeseries, C33 };

    public enum Mic { Arcx,Aimx,Alxp , Bats, Bvmf, Difx, Dsmd, Misx, Mtaa,Neoe ,Otcm, Roco, Ssme, Wbah,Xaim , Xads, Xams, Xase, Xasx, Xath, Xbkf, Xbkk, Xbog, Xbom, Xbrn, Xbru, Xbud, Xcai, Xcse, Xdfm,Xdub, Xesm, Xetr,Xeta ,Xfra, Xhel, Xhkg, Xice, Xidx, Xist, Xjas, Xjse, Xkar, Xkls, Xkos, Xkrx, Xlis, Xlom, Xlon, Xlux, Xmad, Xmex, Xmsm,Xnco, Xncm, Xngs, Xnms, Xnse, Xnys, Xnze,Xoas, Xosl, Xpar, Xphs, Xpra, Xsau, Xsec, Xses, Xsgo, Xshe, Xshg, Xssc, Xsto, Xswx, Xtae, Xtai, Xtks, Xtse, Xvtx, Xkuw,Xpsx ,Xwar, Xeqy };

    public enum Origin { Analyst, Model };

    public enum SecurityType { Adr, CommonStock, Etf, Funds, Gdr };

    public enum TaxCode { Capital, Declared, Default, Dividend, Exempt, Income, Reit };

    public enum TaxJurisdiction { Argentina, Australia, Austria, Bahamas, Bahrain, Belgium, Bermuda, Brazil, Canada, CaymanIslands, Chile, China, Colombia, Curacao, Cyprus, CzechRepublic, Denmark, Egypt, Finland,FaroeIsland, France, Germany, Gibraltar, Greece, Guernsey, HongKong, Hungary, Iceland, India, Indonesia, Ireland, IsleOfMan, Israel, Italy, Japan, Jersey, Kazakhstan,Kuwait ,KoreaRepublicOf, Liberia, Liechtenstein, Lithuania, Luxembourg, Malaysia, Malta ,MarshallIslands, Mexico, Netherlands, NewZealand, Nigeria, Norway, Pakistan, Panama, PapuaNewGuinea, Peru, Philippines, Poland, Portugal, PuertoRico, Qatar, Romania, RussianFederation, SaudiArabia, Singapore, Slovenia, SouthAfrica, Spain, Sweden, Switzerland, TaiwanProvinceOfChina, Thailand, Turkey, UnitedArabEmirates, UnitedKingdom, UnitedStates, VirginIslandsBritish };

    public enum TaxJurisdictionCountryCode { Ae, Ar, At, Au, Be,Bh, Bm, Br, Bs, Ca, Ch, Cl, Cn, Co, Cw, Cy, Cz, De, Dk, Eg, Es, Fi, Fo,Fr, Gb, Gg, Gi, Gr, Hk, Hu, Id, Ie, Il, Im, In, Is, It, Je, Jp, Kr, Ky, Kw, Kz, Li, Lr,Lt, Lu, Mh, Mx, Mt, My, Ng,Nl, No, Nz, Pa, Pe, Pg, Ph, Pk, Pl, Pr, Pt, Qa,Ro, Ru, Sa, Se, Si, Sg, Th, Tr, Tw, Us, Vg, Za };

    public partial class Dividends
    {
        public static Dividends FromJson(string json) => JsonConvert.DeserializeObject<Dividends>(json, MarkitDividend.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dividends self) => JsonConvert.SerializeObject(self, MarkitDividend.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PublishStateConverter.Singleton,
                CurrencyCodeConverter.Singleton,
                DividendFormConverter.Singleton,
                DividendTypeConverter.Singleton,
                MicConverter.Singleton,
                MethodologyConverter.Singleton,
                OriginConverter.Singleton,
                SecurityTypeConverter.Singleton,
                TaxCodeConverter.Singleton,
                TaxJurisdictionConverter.Singleton,
                TaxJurisdictionCountryCodeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PublishStateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PublishState) || t == typeof(PublishState?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "COMPANY":
                    return PublishState.Company;
                case "ESTIMATE":
                    return PublishState.Estimate;
                case "MARKIT":
                    return PublishState.Markit;
                case "PROPOSED":
                    return PublishState.Proposed;
            }
            throw new Exception("Cannot unmarshal type PublishState");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PublishState)untypedValue;
            switch (value)
            {
                case PublishState.Company:
                    serializer.Serialize(writer, "COMPANY");
                    return;
                case PublishState.Estimate:
                    serializer.Serialize(writer, "ESTIMATE");
                    return;
                case PublishState.Markit:
                    serializer.Serialize(writer, "MARKIT");
                    return;
                case PublishState.Proposed:
                    serializer.Serialize(writer, "PROPOSED");
                    return;
            }
            throw new Exception("Cannot marshal type PublishState");
        }

        public static readonly PublishStateConverter Singleton = new PublishStateConverter();
    }

    internal class CurrencyCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CurrencyCode) || t == typeof(CurrencyCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AED":
                    return CurrencyCode.Aed;
                case "ARS":
                    return CurrencyCode.Ars;
                case "ATS":
                    return CurrencyCode.Ats;
                case "AUD":
                    return CurrencyCode.Aud;
                case "BEF":
                    return CurrencyCode.Bef;
                case "BHD":
                    return CurrencyCode.Bhd;
                case "BRL":
                    return CurrencyCode.Brl;
                case "CAD":
                    return CurrencyCode.Cad;
                case "CHF":
                    return CurrencyCode.Chf;
                case "CLP":
                    return CurrencyCode.Clp;
                case "CNH":
                    return CurrencyCode.Cnh;
                case "CNY":
                    return CurrencyCode.Cny;
                case "COP":
                    return CurrencyCode.Cop;
                case "CZK":
                    return CurrencyCode.Czk;
                case "DEM":
                    return CurrencyCode.Dem;
                case "DKK":
                    return CurrencyCode.Dkk;
                case "EGP":
                    return CurrencyCode.Egp;
                case "ESP":
                    return CurrencyCode.Esp;
                case "EUR":
                    return CurrencyCode.Eur;
                case "FIM":
                    return CurrencyCode.Fim;
                case "FRF":
                    return CurrencyCode.Frf;
                case "GBP":
                    return CurrencyCode.Gbp;
                case "GBX":
                    return CurrencyCode.Gbx;
                case "GEL":
                    return CurrencyCode.Gel;
                case "GRD":
                    return CurrencyCode.Grd;
                case "HKD":
                    return CurrencyCode.Hkd;
                case "HUF":
                    return CurrencyCode.Huf;
                case "IDR":
                    return CurrencyCode.Idr;
                case "IEP":
                    return CurrencyCode.Iep;
                case "ILA":
                    return CurrencyCode.Ila;
                case "ILS":
                    return CurrencyCode.Ils;
                case "INR":
                    return CurrencyCode.Inr;
                case "ISK":
                    return CurrencyCode.Isk;
                case "ITL":
                    return CurrencyCode.Itl;
                case "JPY":
                    return CurrencyCode.Jpy;
                case "KRW":
                    return CurrencyCode.Krw;
                case "KWD":
                    return CurrencyCode.Kwd;
                case "KWF":
                    return CurrencyCode.Kwf;
                case "KZT":
                    return CurrencyCode.Kzt;
                case "LUF":
                    return CurrencyCode.Luf;
                case "MXN":
                    return CurrencyCode.Mxn;
                case "MYR":
                    return CurrencyCode.Myr;
                case "NLG":
                    return CurrencyCode.Nlg;
                case "NOK":
                    return CurrencyCode.Nok;
                case "NZD":
                    return CurrencyCode.Nzd;
                case "PEN":
                    return CurrencyCode.Pen;
                case "PHP":
                    return CurrencyCode.Php;
                case "PKR":
                    return CurrencyCode.Pkr;
                case "PLN":
                    return CurrencyCode.Pln;
                case "PTE":
                    return CurrencyCode.Pte;
                case "QAR":
                    return CurrencyCode.Qar;
                case "RON":
                    return CurrencyCode.Ron;
                case "RUB":
                    return CurrencyCode.Rub;
                case "RMB":
                    return CurrencyCode.Rmb;
                case "SAR":
                    return CurrencyCode.Sar;
                case "SEK":
                    return CurrencyCode.Sek;
                case "SGD":
                    return CurrencyCode.Sgd;
                case "THB":
                    return CurrencyCode.Thb;
                case "TRY":
                    return CurrencyCode.Try;
                case "TWD":
                    return CurrencyCode.Twd;
                case "USD":
                    return CurrencyCode.Usd;
                case "UYU":
                    return CurrencyCode.Uyu;
                case "XXX":
                    return CurrencyCode.Xxx;
                case "ZAC":
                    return CurrencyCode.Zac;
                case "ZAR":
                    return CurrencyCode.Zar;
                case "   ":
                    return CurrencyCode.Xxx;

            }
            throw new Exception("Cannot unmarshal type CurrencyCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CurrencyCode)untypedValue;
            switch (value)
            {
                case CurrencyCode.Aed:
                    serializer.Serialize(writer, "AED");
                    return;
                case CurrencyCode.Ars:
                    serializer.Serialize(writer, "ARS");
                    return;
                case CurrencyCode.Ats:
                    serializer.Serialize(writer, "ATS");
                    return;
                case CurrencyCode.Aud:
                    serializer.Serialize(writer, "AUD");
                    return;
                case CurrencyCode.Bef:
                    serializer.Serialize(writer, "BEF");
                    return;
                case CurrencyCode.Bhd:
                    serializer.Serialize(writer, "BHD");
                    return;
                case CurrencyCode.Brl:
                    serializer.Serialize(writer, "BRL");
                    return;
                case CurrencyCode.Cad:
                    serializer.Serialize(writer, "CAD");
                    return;
                case CurrencyCode.Chf:
                    serializer.Serialize(writer, "CHF");
                    return;
                case CurrencyCode.Clp:
                    serializer.Serialize(writer, "CLP");
                    return;
                case CurrencyCode.Cnh:
                    serializer.Serialize(writer, "CNH");
                    return;
                case CurrencyCode.Cny:
                    serializer.Serialize(writer, "CNY");
                    return;
                case CurrencyCode.Cop:
                    serializer.Serialize(writer, "COP");
                    return;
                case CurrencyCode.Czk:
                    serializer.Serialize(writer, "CZK");
                    return;
                case CurrencyCode.Dem:
                    serializer.Serialize(writer, "DEM");
                    return;
                case CurrencyCode.Dkk:
                    serializer.Serialize(writer, "DKK");
                    return;
                case CurrencyCode.Egp:
                    serializer.Serialize(writer, "EGP");
                    return;
                case CurrencyCode.Esp:
                    serializer.Serialize(writer, "ESP");
                    return;
                case CurrencyCode.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
                case CurrencyCode.Fim:
                    serializer.Serialize(writer, "FIM");
                    return;
                case CurrencyCode.Frf:
                    serializer.Serialize(writer, "FRF");
                    return;
                case CurrencyCode.Gbp:
                    serializer.Serialize(writer, "GBP");
                    return;
                case CurrencyCode.Gbx:
                    serializer.Serialize(writer, "GBX");
                    return;
                case CurrencyCode.Gel:
                    serializer.Serialize(writer, "GEL");
                    return;
                case CurrencyCode.Grd:
                    serializer.Serialize(writer, "GRD");
                    return;
                case CurrencyCode.Hkd:
                    serializer.Serialize(writer, "HKD");
                    return;
                case CurrencyCode.Huf:
                    serializer.Serialize(writer, "HUF");
                    return;
                case CurrencyCode.Idr:
                    serializer.Serialize(writer, "IDR");
                    return;
                case CurrencyCode.Iep:
                    serializer.Serialize(writer, "IEP");
                    return;
                case CurrencyCode.Ila:
                    serializer.Serialize(writer, "ILA");
                    return;
                case CurrencyCode.Ils:
                    serializer.Serialize(writer, "ILS");
                    return;
                case CurrencyCode.Inr:
                    serializer.Serialize(writer, "INR");
                    return;
                case CurrencyCode.Isk:
                    serializer.Serialize(writer, "ISK");
                    return;
                case CurrencyCode.Itl:
                    serializer.Serialize(writer, "ITL");
                    return;
                case CurrencyCode.Jpy:
                    serializer.Serialize(writer, "JPY");
                    return;
                case CurrencyCode.Krw:
                    serializer.Serialize(writer, "KRW");
                    return;
                case CurrencyCode.Kwd:
                    serializer.Serialize(writer, "KWD");
                    return;
                case CurrencyCode.Kwf:
                    serializer.Serialize(writer, "KWF");
                    return;
                case CurrencyCode.Kzt:
                    serializer.Serialize(writer, "KZT");
                    return;
                case CurrencyCode.Luf:
                    serializer.Serialize(writer, "LUF");
                    return;
                case CurrencyCode.Mxn:
                    serializer.Serialize(writer, "MXN");
                    return;
                case CurrencyCode.Myr:
                    serializer.Serialize(writer, "MYR");
                    return;
                case CurrencyCode.Nlg:
                    serializer.Serialize(writer, "NLG");
                    return;
                case CurrencyCode.Nok:
                    serializer.Serialize(writer, "NOK");
                    return;
                case CurrencyCode.Nzd:
                    serializer.Serialize(writer, "NZD");
                    return;
                case CurrencyCode.Pen:
                    serializer.Serialize(writer, "PEN");
                    return;
                case CurrencyCode.Php:
                    serializer.Serialize(writer, "PHP");
                    return;
                case CurrencyCode.Pkr:
                    serializer.Serialize(writer, "PKR");
                    return;
                case CurrencyCode.Pln:
                    serializer.Serialize(writer, "PLN");
                    return;
                case CurrencyCode.Pte:
                    serializer.Serialize(writer, "PTE");
                    return;
                case CurrencyCode.Qar:
                    serializer.Serialize(writer, "QAR");
                    return;
                case CurrencyCode.Ron:
                    serializer.Serialize(writer, "RON");
                    return;
                case CurrencyCode.Rub:
                    serializer.Serialize(writer, "RUB");
                    return;
                case CurrencyCode.Rmb:
                    serializer.Serialize(writer, "RMB");
                    return;
                case CurrencyCode.Sar:
                    serializer.Serialize(writer, "SAR");
                    return;
                case CurrencyCode.Sek:
                    serializer.Serialize(writer, "SEK");
                    return;
                case CurrencyCode.Sgd:
                    serializer.Serialize(writer, "SGD");
                    return;
                case CurrencyCode.Thb:
                    serializer.Serialize(writer, "THB");
                    return;
                case CurrencyCode.Try:
                    serializer.Serialize(writer, "TRY");
                    return;
                case CurrencyCode.Twd:
                    serializer.Serialize(writer, "TWD");
                    return;
                case CurrencyCode.Usd:
                    serializer.Serialize(writer, "USD");
                    return;
                case CurrencyCode.Uyu:
                    serializer.Serialize(writer, "UYU");
                    return;
                case CurrencyCode.Xxx:
                    serializer.Serialize(writer, "XXX");
                    return;
                case CurrencyCode.Zac:
                    serializer.Serialize(writer, "ZAC");
                    return;
                case CurrencyCode.Zar:
                    serializer.Serialize(writer, "ZAR");
                    return;
            }
            throw new Exception("Cannot marshal type CurrencyCode");
        }

        public static readonly CurrencyCodeConverter Singleton = new CurrencyCodeConverter();
    }

    internal class DividendFormConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DividendForm) || t == typeof(DividendForm?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CASH":
                    return DividendForm.Cash;
                case "STOCK":
                    return DividendForm.Stock;
            }
            throw new Exception("Cannot unmarshal type DividendForm");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DividendForm)untypedValue;
            switch (value)
            {
                case DividendForm.Cash:
                    serializer.Serialize(writer, "CASH");
                    return;
                case DividendForm.Stock:
                    serializer.Serialize(writer, "STOCK");
                    return;
            }
            throw new Exception("Cannot marshal type DividendForm");
        }

        public static readonly DividendFormConverter Singleton = new DividendFormConverter();
    }

    internal class DividendTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DividendType) || t == typeof(DividendType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "2ND INT":
                    return DividendType.The2NdInt;
                case "2ND INT PID":
                    return DividendType.The2NdIntPid;
                case "3RD INT":
                    return DividendType.The3RdInt;
                case "3RD INT PID":
                    return DividendType.The3RdIntPid;
                case "4TH INT":
                    return DividendType.The4ThInt;
                case "4TH INT PID":
                    return DividendType.The4ThIntPid;
                case "5TH INT":
                    return DividendType.The5ThInt;
                case "COND":
                    return DividendType.Cond;
                case "CR":
                    return DividendType.Cr;
                case "CR (10)":
                    return DividendType.Cr10;
                case "CR (11)":
                    return DividendType.Cr11;
                case "CR (12)":
                    return DividendType.Cr12;
                case "CR (2)":
                    return DividendType.Cr2;
                case "CR (3)":
                    return DividendType.Cr3;
                case "CR (4)":
                    return DividendType.Cr4;
                case "CR4":
                    return DividendType.Cr4;
                case "CR (5)":
                    return DividendType.Cr5;
                case "CR (6)":
                    return DividendType.Cr6;
                case "CR (7)":
                    return DividendType.Cr7;
                case "CR (8)":
                    return DividendType.Cr8;
                case "CR (9)":
                    return DividendType.Cr9;
                case "CR FIN":
                    return DividendType.CrFin;
                case "CR INT":
                    return DividendType.CrInt;
                case "FIN":
                    return DividendType.Fin;
                case "FIN (SO)":
                    return DividendType.FinSo;
                case "FIN PID":
                    return DividendType.FinPid;
                case "INT":
                    return DividendType.Int;
                case "INT PID":
                    return DividendType.IntPid;
                case "M01":
                    return DividendType.M01;
                case "M01 PID":
                    return DividendType.M01Pid;
                case "M02":
                    return DividendType.M02;
                case "M02 PID":
                    return DividendType.M02Pid;
                case "M03":
                    return DividendType.M03;
                case "M03 PID":
                    return DividendType.M03Pid;
                case "M04":
                    return DividendType.M04;
                case "M04 PID":
                    return DividendType.M04Pid;
                case "M05":
                    return DividendType.M05;
                case "M05 PID":
                    return DividendType.M05Pid;
                case "M06":
                    return DividendType.M06;
                case "M06 PID":
                    return DividendType.M06Pid;
                case "M07":
                    return DividendType.M07;
                case "M07 PID":
                    return DividendType.M07Pid;
                case "M08":
                    return DividendType.M08;
                case "M08 PID":
                    return DividendType.M08Pid;
                case "M09":
                    return DividendType.M09;
                case "M09 PID":
                    return DividendType.M09Pid;
                case "M10":
                    return DividendType.M10;
                case "M10 PID":
                    return DividendType.M10Pid;
                case "M11":
                    return DividendType.M11;
                case "M11 PID":
                    return DividendType.M11Pid;
                case "M12":
                    return DividendType.M12;
                case "M12 PID":
                    return DividendType.M12Pid;
                case "Q1":
                    return DividendType.Q1;
                case "Q1 PID":
                    return DividendType.Q1Pid;
                case "Q2":
                    return DividendType.Q2;
                case "Q2 PID":
                    return DividendType.Q2Pid;
                case "Q3":
                    return DividendType.Q3;
                case "Q3 PID":
                    return DividendType.Q3Pid;
                case "Q4":
                    return DividendType.Q4;
                case "Q4 PID":
                    return DividendType.Q4Pid;
                case "SPEC":
                    return DividendType.Spec;
                case "SPEC (2ND)":
                    return DividendType.Spec2Nd;
                case "SPEC (3RD)":
                    return DividendType.Spec3Rd;
                case "SPEC (4TH)":
                    return DividendType.Spec4th;
                case "YR":
                    return DividendType.Yr;
                case "Cond":
                    return DividendType.Cond;
                case "Q2 (SO)":
                    return DividendType.Q2;
                case "Q3 (SO)":
                    return DividendType.Q3;
                case "COND (2ND)":
                    return DividendType.COND2ND;
                case "SPEC PID":
                    return DividendType.SpecPid;
                case "SPEC(SO)":
                    return DividendType.SpecSo;
                case "Q4 (SO)":
                    return DividendType.Q4SO;
                case "SPEC (5TH)":
                    return DividendType.SPEC5TH;
                case "5TH INT PID":
                    return DividendType.THE5THINTPID;
                    


            }
            throw new Exception("Cannot unmarshal type DividendType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DividendType)untypedValue;
            switch (value)
            {
                case DividendType.The2NdInt:
                    serializer.Serialize(writer, "2ND INT");
                    return;
                case DividendType.The2NdIntPid:
                    serializer.Serialize(writer, "2ND INT PID");
                    return;
                case DividendType.The3RdInt:
                    serializer.Serialize(writer, "3RD INT");
                    return;
                case DividendType.The3RdIntPid:
                    serializer.Serialize(writer, "3RD INT PID");
                    return;
                case DividendType.The4ThInt:
                    serializer.Serialize(writer, "4TH INT");
                    return;
                case DividendType.The4ThIntPid:
                    serializer.Serialize(writer, "4TH INT PID");
                    return;
                case DividendType.The5ThInt:
                    serializer.Serialize(writer, "5TH INT");
                    return;
                case DividendType.Cond:
                    serializer.Serialize(writer, "COND");
                    return;
                case DividendType.Cr:
                    serializer.Serialize(writer, "CR");
                    return;
                case DividendType.Cr10:
                    serializer.Serialize(writer, "CR (10)");
                    return;
                case DividendType.Cr11:
                    serializer.Serialize(writer, "CR (11)");
                    return;
                case DividendType.Cr12:
                    serializer.Serialize(writer, "CR (12)");
                    return;
                case DividendType.Cr2:
                    serializer.Serialize(writer, "CR (2)");
                    return;
                case DividendType.Cr3:
                    serializer.Serialize(writer, "CR (3)");
                    return;
                case DividendType.Cr4:
                    serializer.Serialize(writer, "CR (4)");
                    return;
                case DividendType.Cr5:
                    serializer.Serialize(writer, "CR (5)");
                    return;
                case DividendType.Cr6:
                    serializer.Serialize(writer, "CR (6)");
                    return;
                case DividendType.Cr7:
                    serializer.Serialize(writer, "CR (7)");
                    return;
                case DividendType.Cr8:
                    serializer.Serialize(writer, "CR (8)");
                    return;
                case DividendType.Cr9:
                    serializer.Serialize(writer, "CR (9)");
                    return;
                case DividendType.CrFin:
                    serializer.Serialize(writer, "CR FIN");
                    return;
                case DividendType.CrInt:
                    serializer.Serialize(writer, "CR INT");
                    return;
                case DividendType.Fin:
                    serializer.Serialize(writer, "FIN");
                    return;
                case DividendType.FinSo:
                    serializer.Serialize(writer, "FIN (SO)");
                    return;
                case DividendType.FinPid:
                    serializer.Serialize(writer, "FIN PID");
                    return;
                case DividendType.Int:
                    serializer.Serialize(writer, "INT");
                    return;
                case DividendType.IntPid:
                    serializer.Serialize(writer, "INT PID");
                    return;
                case DividendType.M01:
                    serializer.Serialize(writer, "M01");
                    return;
                case DividendType.M01Pid:
                    serializer.Serialize(writer, "M01 PID");
                    return;
                case DividendType.M02:
                    serializer.Serialize(writer, "M02");
                    return;
                case DividendType.M02Pid:
                    serializer.Serialize(writer, "M02 PID");
                    return;
                case DividendType.M03:
                    serializer.Serialize(writer, "M03");
                    return;
                case DividendType.M03Pid:
                    serializer.Serialize(writer, "M03 PID");
                    return;
                case DividendType.M04:
                    serializer.Serialize(writer, "M04");
                    return;
                case DividendType.M04Pid:
                    serializer.Serialize(writer, "M04 PID");
                    return;
                case DividendType.M05:
                    serializer.Serialize(writer, "M05");
                    return;
                case DividendType.M05Pid:
                    serializer.Serialize(writer, "M05 PID");
                    return;
                case DividendType.M06:
                    serializer.Serialize(writer, "M06");
                    return;
                case DividendType.M06Pid:
                    serializer.Serialize(writer, "M06 PID");
                    return;
                case DividendType.M07:
                    serializer.Serialize(writer, "M07");
                    return;
                case DividendType.M07Pid:
                    serializer.Serialize(writer, "M07 PID");
                    return;
                case DividendType.M08:
                    serializer.Serialize(writer, "M08");
                    return;
                case DividendType.M08Pid:
                    serializer.Serialize(writer, "M08 PID");
                    return;
                case DividendType.M09:
                    serializer.Serialize(writer, "M09");
                    return;
                case DividendType.M09Pid:
                    serializer.Serialize(writer, "M09 PID");
                    return;
                case DividendType.M10:
                    serializer.Serialize(writer, "M10");
                    return;
                case DividendType.M10Pid:
                    serializer.Serialize(writer, "M10 PID");
                    return;
                case DividendType.M11:
                    serializer.Serialize(writer, "M11");
                    return;
                case DividendType.M11Pid:
                    serializer.Serialize(writer, "M11 PID");
                    return;
                case DividendType.M12:
                    serializer.Serialize(writer, "M12");
                    return;
                case DividendType.M12Pid:
                    serializer.Serialize(writer, "M12 PID");
                    return;
                case DividendType.Q1:
                    serializer.Serialize(writer, "Q1");
                    return;
                case DividendType.Q1Pid:
                    serializer.Serialize(writer, "Q1 PID");
                    return;
                case DividendType.Q2:
                    serializer.Serialize(writer, "Q2");
                    return;
                case DividendType.Q2Pid:
                    serializer.Serialize(writer, "Q2 PID");
                    return;
                case DividendType.Q3:
                    serializer.Serialize(writer, "Q3");
                    return;
                case DividendType.Q3Pid:
                    serializer.Serialize(writer, "Q3 PID");
                    return;
                case DividendType.Q4:
                    serializer.Serialize(writer, "Q4");
                    return;
                case DividendType.Q4Pid:
                    serializer.Serialize(writer, "Q4 PID");
                    return;
                case DividendType.Spec:
                    serializer.Serialize(writer, "SPEC");
                    return;
                case DividendType.Spec2Nd:
                    serializer.Serialize(writer, "SPEC (2ND)");
                    return;
                case DividendType.Spec3Rd:
                    serializer.Serialize(writer, "SPEC (3RD)");
                    return;
                case DividendType.Spec4th:
                    serializer.Serialize(writer, "SPEC (4TH)");
                    return;
                case DividendType.Yr:
                    serializer.Serialize(writer, "YR");
                    return;
                case DividendType.COND2ND:
                    serializer.Serialize(writer, "COND (2ND)");
                    return;
                case DividendType.SpecPid:
                    serializer.Serialize(writer, "SPEC PID");
                    return;
                case DividendType.SpecSo:
                    serializer.Serialize(writer, "SPEC(SO)");
                    return;
                case DividendType.Q4SO:
                    serializer.Serialize(writer, "Q4 (SO)");
                    return;
                case DividendType.SPEC5TH:
                    serializer.Serialize(writer, "SPEC (5TH)");
                    return;
                case DividendType.THE5THINTPID:
                    serializer.Serialize(writer, "5TH INT PID");
                    return;
            }
            throw new Exception("Cannot marshal type DividendType");
        }

        public static readonly DividendTypeConverter Singleton = new DividendTypeConverter();
    }

    internal class MicConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mic) || t == typeof(Mic?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ARCX":
                    return Mic.Arcx;
                case "AIMX":
                    return Mic.Aimx;
                case "ALXP":
                    return Mic.Alxp;
                case "BATS":
                    return Mic.Bats;
                case "BVMF":
                    return Mic.Bvmf;
                case "DIFX":
                    return Mic.Difx;
                case "DSMD":
                    return Mic.Dsmd;
                case "MISX":
                    return Mic.Misx;
                case "MTAA":
                    return Mic.Mtaa;
                case "OTCM":
                    return Mic.Otcm;
                case "ROCO":
                    return Mic.Roco;
                case "SSME":
                    return Mic.Ssme;
                case "WBAH":
                    return Mic.Wbah;
                case "XADS":
                    return Mic.Xads;
                case "XAMS":
                    return Mic.Xams;
                case "XASE":
                    return Mic.Xase;
                case "XASX":
                    return Mic.Xasx;
                case "XATH":
                    return Mic.Xath;
                case "XBKF":
                    return Mic.Xbkf;
                case "XBKK":
                    return Mic.Xbkk;
                case "XBOG":
                    return Mic.Xbog;
                case "XBOM":
                    return Mic.Xbom;
                case "XBRN":
                    return Mic.Xbrn;
                case "XBRU":
                    return Mic.Xbru;
                case "XBUD":
                    return Mic.Xbud;
                case "XCAI":
                    return Mic.Xcai;
                case "XCSE":
                    return Mic.Xcse;
                case "XDFM":
                    return Mic.Xdfm;
                case "XDUB":
                    return Mic.Xdub;
                case "XESM":
                    return Mic.Xesm;
                case "XETR":
                    return Mic.Xetr;
                case "XFRA":
                    return Mic.Xfra;
                case "XHEL":
                    return Mic.Xhel;
                case "XHKG":
                    return Mic.Xhkg;
                case "XICE":
                    return Mic.Xice;
                case "XIDX":
                    return Mic.Xidx;
                case "XIST":
                    return Mic.Xist;
                case "XJAS":
                    return Mic.Xjas;
                case "XJSE":
                    return Mic.Xjse;
                case "XKAR":
                    return Mic.Xkar;
                case "XKLS":
                    return Mic.Xkls;
                case "XKOS":
                    return Mic.Xkos;
                case "XKRX":
                    return Mic.Xkrx;
                case "XLIS":
                    return Mic.Xlis;
                case "XLOM":
                    return Mic.Xlom;
                case "XLON":
                    return Mic.Xlon;
                case "XLUX":
                    return Mic.Xlux;
                case "XMAD":
                    return Mic.Xmad;
                case "XMEX":
                    return Mic.Xmex;
                case "XMSM":
                    return Mic.Xmsm;
                case "XNCM":
                    return Mic.Xncm;
                case "XNGS":
                    return Mic.Xngs;
                case "XNMS":
                    return Mic.Xnms;
                case "XNSE":
                    return Mic.Xnse;
                case "XNYS":
                    return Mic.Xnys;
                case "XNZE":
                    return Mic.Xnze;
                case "XOAS":
                    return Mic.Xoas;
                case "XOSL":
                    return Mic.Xosl;
                case "XPAR":
                    return Mic.Xpar;
                case "XPHS":
                    return Mic.Xphs;
                case "XPRA":
                    return Mic.Xpra;
                case "XSAU":
                    return Mic.Xsau;
                case "XSEC":
                    return Mic.Xsec;
                case "XSES":
                    return Mic.Xses;
                case "XSGO":
                    return Mic.Xsgo;
                case "XSHE":
                    return Mic.Xshe;
                case "XSHG":
                    return Mic.Xshg;
                case "XSSC":
                    return Mic.Xssc;
                case "XSTO":
                    return Mic.Xsto;
                case "XSWX":
                    return Mic.Xswx;
                case "XTAE":
                    return Mic.Xtae;
                case "XTAI":
                    return Mic.Xtai;
                case "XTKS":
                    return Mic.Xtks;
                case "XTSE":
                    return Mic.Xtse;
                case "XVTX":
                    return Mic.Xvtx;
                case "XWAR":
                    return Mic.Xwar;
                case "XKUW":
                    return Mic.Xkuw;
                case "XETA":
                    return Mic.Xeta;
                case "XPSX":
                    return Mic.Xpsx;
                case "XAIM":
                    return Mic.Xaim;
                case "NEOE":
                    return Mic.Neoe;
                case "XEQY":
                    return Mic.Xeqy;
                case "XNCO":
                    return Mic.Xnco;

            }
            throw new Exception("Cannot unmarshal type Mic");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mic)untypedValue;
            switch (value)
            {
                case Mic.Arcx:
                    serializer.Serialize(writer, "ARCX");
                    return;
                case Mic.Aimx:
                    serializer.Serialize(writer, "AIMX");
                    return;
                case Mic.Alxp:
                    serializer.Serialize(writer, "ALXP");
                    return;
                case Mic.Bats:
                    serializer.Serialize(writer, "BATS");
                    return;
                case Mic.Bvmf:
                    serializer.Serialize(writer, "BVMF");
                    return;
                case Mic.Difx:
                    serializer.Serialize(writer, "DIFX");
                    return;
                case Mic.Dsmd:
                    serializer.Serialize(writer, "DSMD");
                    return;
                case Mic.Misx:
                    serializer.Serialize(writer, "MISX");
                    return;
                case Mic.Mtaa:
                    serializer.Serialize(writer, "MTAA");
                    return;
                case Mic.Otcm:
                    serializer.Serialize(writer, "OTCM");
                    return;
                case Mic.Roco:
                    serializer.Serialize(writer, "ROCO");
                    return;
                case Mic.Ssme:
                    serializer.Serialize(writer, "SSME");
                    return;
                case Mic.Wbah:
                    serializer.Serialize(writer, "WBAH");
                    return;
                case Mic.Xads:
                    serializer.Serialize(writer, "XADS");
                    return;
                case Mic.Xams:
                    serializer.Serialize(writer, "XAMS");
                    return;
                case Mic.Xase:
                    serializer.Serialize(writer, "XASE");
                    return;
                case Mic.Xasx:
                    serializer.Serialize(writer, "XASX");
                    return;
                case Mic.Xath:
                    serializer.Serialize(writer, "XATH");
                    return;
                case Mic.Xbkf:
                    serializer.Serialize(writer, "XBKF");
                    return;
                case Mic.Xbkk:
                    serializer.Serialize(writer, "XBKK");
                    return;
                case Mic.Xbog:
                    serializer.Serialize(writer, "XBOG");
                    return;
                case Mic.Xbom:
                    serializer.Serialize(writer, "XBOM");
                    return;
                case Mic.Xbrn:
                    serializer.Serialize(writer, "XBRN");
                    return;
                case Mic.Xbru:
                    serializer.Serialize(writer, "XBRU");
                    return;
                case Mic.Xbud:
                    serializer.Serialize(writer, "XBUD");
                    return;
                case Mic.Xcai:
                    serializer.Serialize(writer, "XCAI");
                    return;
                case Mic.Xcse:
                    serializer.Serialize(writer, "XCSE");
                    return;
                case Mic.Xdfm:
                    serializer.Serialize(writer, "XDFM");
                    return;
                case Mic.Xdub:
                    serializer.Serialize(writer, "XDUB");
                    return;
                case Mic.Xesm:
                    serializer.Serialize(writer, "XESM");
                    return;
                case Mic.Xetr:
                    serializer.Serialize(writer, "XETR");
                    return;
                case Mic.Xfra:
                    serializer.Serialize(writer, "XFRA");
                    return;
                case Mic.Xhel:
                    serializer.Serialize(writer, "XHEL");
                    return;
                case Mic.Xhkg:
                    serializer.Serialize(writer, "XHKG");
                    return;
                case Mic.Xice:
                    serializer.Serialize(writer, "XICE");
                    return;
                case Mic.Xidx:
                    serializer.Serialize(writer, "XIDX");
                    return;
                case Mic.Xist:
                    serializer.Serialize(writer, "XIST");
                    return;
                case Mic.Xjas:
                    serializer.Serialize(writer, "XJAS");
                    return;
                case Mic.Xjse:
                    serializer.Serialize(writer, "XJSE");
                    return;
                case Mic.Xkar:
                    serializer.Serialize(writer, "XKAR");
                    return;
                case Mic.Xkls:
                    serializer.Serialize(writer, "XKLS");
                    return;
                case Mic.Xkos:
                    serializer.Serialize(writer, "XKOS");
                    return;
                case Mic.Xkrx:
                    serializer.Serialize(writer, "XKRX");
                    return;
                case Mic.Xlis:
                    serializer.Serialize(writer, "XLIS");
                    return;
                case Mic.Xlom:
                    serializer.Serialize(writer, "XLOM");
                    return;
                case Mic.Xlon:
                    serializer.Serialize(writer, "XLON");
                    return;
                case Mic.Xlux:
                    serializer.Serialize(writer, "XLUX");
                    return;
                case Mic.Xmad:
                    serializer.Serialize(writer, "XMAD");
                    return;
                case Mic.Xmex:
                    serializer.Serialize(writer, "XMEX");
                    return;
                case Mic.Xmsm:
                    serializer.Serialize(writer, "XMSM");
                    return;
                case Mic.Xncm:
                    serializer.Serialize(writer, "XNCM");
                    return;
                case Mic.Xngs:
                    serializer.Serialize(writer, "XNGS");
                    return;
                case Mic.Xnms:
                    serializer.Serialize(writer, "XNMS");
                    return;
                case Mic.Xnse:
                    serializer.Serialize(writer, "XNSE");
                    return;
                case Mic.Xnys:
                    serializer.Serialize(writer, "XNYS");
                    return;
                case Mic.Xnze:
                    serializer.Serialize(writer, "XNZE");
                    return;
                case Mic.Xosl:
                    serializer.Serialize(writer, "XOSL");
                    return;
                case Mic.Xoas:
                    serializer.Serialize(writer, "XOAS");
                    return;
                case Mic.Xpar:
                    serializer.Serialize(writer, "XPAR");
                    return;
                case Mic.Xphs:
                    serializer.Serialize(writer, "XPHS");
                    return;
                case Mic.Xpra:
                    serializer.Serialize(writer, "XPRA");
                    return;
                case Mic.Xsau:
                    serializer.Serialize(writer, "XSAU");
                    return;
                case Mic.Xsec:
                    serializer.Serialize(writer, "XSEC");
                    return;
                case Mic.Xses:
                    serializer.Serialize(writer, "XSES");
                    return;
                case Mic.Xsgo:
                    serializer.Serialize(writer, "XSGO");
                    return;
                case Mic.Xshe:
                    serializer.Serialize(writer, "XSHE");
                    return;
                case Mic.Xshg:
                    serializer.Serialize(writer, "XSHG");
                    return;
                case Mic.Xssc:
                    serializer.Serialize(writer, "XSSC");
                    return;
                case Mic.Xsto:
                    serializer.Serialize(writer, "XSTO");
                    return;
                case Mic.Xswx:
                    serializer.Serialize(writer, "XSWX");
                    return;
                case Mic.Xtae:
                    serializer.Serialize(writer, "XTAE");
                    return;
                case Mic.Xtai:
                    serializer.Serialize(writer, "XTAI");
                    return;
                case Mic.Xtks:
                    serializer.Serialize(writer, "XTKS");
                    return;
                case Mic.Xtse:
                    serializer.Serialize(writer, "XTSE");
                    return;
                case Mic.Xvtx:
                    serializer.Serialize(writer, "XVTX");
                    return;
                case Mic.Xwar:
                    serializer.Serialize(writer, "XWAR");
                    return;
                case Mic.Xkuw:
                    serializer.Serialize(writer, "XKUW");
                    return;
                case Mic.Xeta:
                    serializer.Serialize(writer, "XETA");
                    return;
                case Mic.Xpsx:
                    serializer.Serialize(writer, "XPSX");
                    return;
                case Mic.Xaim:
                    serializer.Serialize(writer, "XAIM");
                    return;
                case Mic.Neoe:
                    serializer.Serialize(writer, "NEOE");
                    return;
                case Mic.Xeqy:
                    serializer.Serialize(writer, "XEQY");
                    return;
                case Mic.Xnco:
                    serializer.Serialize(writer, "XNCO");
                    return;
            }
            throw new Exception("Cannot marshal type Mic");
        }

        public static readonly MicConverter Singleton = new MicConverter();
    }

    internal class MethodologyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Methodology) || t == typeof(Methodology?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BAYESIANREGRESSION":
                    return Methodology.Bayesianregression;
                case "GUIDANCE":
                    return Methodology.Guidance;
                case "GrowthCap":
                    return Methodology.GrowthCap;
                case "INTERIM":
                    return Methodology.Interim;
                case "Implicit":
                    return Methodology.Implicit;
                case "LASTVAL":
                    return Methodology.Lastval;
                case "N/A":
                    return Methodology.NA;
                case "PRconhEPS":
                    return Methodology.PRconhEps;
                case "PRlastEPS":
                    return Methodology.PRlastEps;
                case "TIMESERIES":
                    return Methodology.Timeseries;
                case "33":
                    return Methodology.C33;
            }
            throw new Exception("Cannot unmarshal type Methodology");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Methodology)untypedValue;
            switch (value)
            {
                case Methodology.Bayesianregression:
                    serializer.Serialize(writer, "BAYESIANREGRESSION");
                    return;
                case Methodology.Guidance:
                    serializer.Serialize(writer, "GUIDANCE");
                    return;
                case Methodology.GrowthCap:
                    serializer.Serialize(writer, "GrowthCap");
                    return;
                case Methodology.Interim:
                    serializer.Serialize(writer, "INTERIM");
                    return;
                case Methodology.Implicit:
                    serializer.Serialize(writer, "Implicit");
                    return;
                case Methodology.Lastval:
                    serializer.Serialize(writer, "LASTVAL");
                    return;
                case Methodology.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
                case Methodology.PRconhEps:
                    serializer.Serialize(writer, "PRconhEPS");
                    return;
                case Methodology.PRlastEps:
                    serializer.Serialize(writer, "PRlastEPS");
                    return;
                case Methodology.Timeseries:
                    serializer.Serialize(writer, "TIMESERIES");
                    return;
                case Methodology.C33:
                    serializer.Serialize(writer, "33");
                    return;
            }
            throw new Exception("Cannot marshal type Methodology");
        }

        public static readonly MethodologyConverter Singleton = new MethodologyConverter();
    }

    internal class OriginConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Origin) || t == typeof(Origin?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ANALYST":
                    return Origin.Analyst;
                case "MODEL":
                    return Origin.Model;
            }
            throw new Exception("Cannot unmarshal type Origin");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Origin)untypedValue;
            switch (value)
            {
                case Origin.Analyst:
                    serializer.Serialize(writer, "ANALYST");
                    return;
                case Origin.Model:
                    serializer.Serialize(writer, "MODEL");
                    return;
            }
            throw new Exception("Cannot marshal type Origin");
        }

        public static readonly OriginConverter Singleton = new OriginConverter();
    }

    internal class SecurityTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SecurityType) || t == typeof(SecurityType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ADR":
                    return SecurityType.Adr;
                case "Common Stock":
                    return SecurityType.CommonStock;
                case "ETF":
                    return SecurityType.Etf;
                case "Funds":
                    return SecurityType.Funds;
                case "GDR":
                    return SecurityType.Gdr;
            }
            throw new Exception("Cannot unmarshal type SecurityType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SecurityType)untypedValue;
            switch (value)
            {
                case SecurityType.Adr:
                    serializer.Serialize(writer, "ADR");
                    return;
                case SecurityType.CommonStock:
                    serializer.Serialize(writer, "Common Stock");
                    return;
                case SecurityType.Etf:
                    serializer.Serialize(writer, "ETF");
                    return;
                case SecurityType.Funds:
                    serializer.Serialize(writer, "Funds");
                    return;
                case SecurityType.Gdr:
                    serializer.Serialize(writer, "GDR");
                    return;
            }
            throw new Exception("Cannot marshal type SecurityType");
        }

        public static readonly SecurityTypeConverter Singleton = new SecurityTypeConverter();
    }

    internal class TaxCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TaxCode) || t == typeof(TaxCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CAPITAL":
                    return TaxCode.Capital;
                case "DECLARED":
                    return TaxCode.Declared;
                case "DEFAULT":
                    return TaxCode.Default;
                case "DIVIDEND":
                    return TaxCode.Dividend;
                case "EXEMPT":
                    return TaxCode.Exempt;
                case "INCOME":
                    return TaxCode.Income;
                case "REIT":
                    return TaxCode.Reit;
            }
            throw new Exception("Cannot unmarshal type TaxCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TaxCode)untypedValue;
            switch (value)
            {
                case TaxCode.Capital:
                    serializer.Serialize(writer, "CAPITAL");
                    return;
                case TaxCode.Declared:
                    serializer.Serialize(writer, "DECLARED");
                    return;
                case TaxCode.Default:
                    serializer.Serialize(writer, "DEFAULT");
                    return;
                case TaxCode.Dividend:
                    serializer.Serialize(writer, "DIVIDEND");
                    return;
                case TaxCode.Exempt:
                    serializer.Serialize(writer, "EXEMPT");
                    return;
                case TaxCode.Income:
                    serializer.Serialize(writer, "INCOME");
                    return;
                case TaxCode.Reit:
                    serializer.Serialize(writer, "REIT");
                    return;
            }
            throw new Exception("Cannot marshal type TaxCode");
        }

        public static readonly TaxCodeConverter Singleton = new TaxCodeConverter();
    }

    internal class TaxJurisdictionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TaxJurisdiction) || t == typeof(TaxJurisdiction?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ARGENTINA":
                    return TaxJurisdiction.Argentina;
                case "AUSTRALIA":
                    return TaxJurisdiction.Australia;
                case "AUSTRIA":
                    return TaxJurisdiction.Austria;
                case "BAHAMAS":
                    return TaxJurisdiction.Bahamas;
                case "BAHRAIN":
                    return TaxJurisdiction.Bahrain;  
                case "BELGIUM":
                    return TaxJurisdiction.Belgium;
                case "BERMUDA":
                    return TaxJurisdiction.Bermuda;
                case "BRAZIL":
                    return TaxJurisdiction.Brazil;
                case "CANADA":
                    return TaxJurisdiction.Canada;
                case "CAYMAN ISLANDS":
                    return TaxJurisdiction.CaymanIslands;
                case "CHILE":
                    return TaxJurisdiction.Chile;
                case "CHINA":
                    return TaxJurisdiction.China;
                case "COLOMBIA":
                    return TaxJurisdiction.Colombia;
                case "CURACAO":
                    return TaxJurisdiction.Curacao;
                case "CYPRUS":
                    return TaxJurisdiction.Cyprus;
                case "CZECH REPUBLIC":
                    return TaxJurisdiction.CzechRepublic;
                case "DENMARK":
                    return TaxJurisdiction.Denmark;
                case "EGYPT":
                    return TaxJurisdiction.Egypt;
                case "FINLAND":
                    return TaxJurisdiction.Finland;
                case "FAROE ISLANDS":
                    return TaxJurisdiction.FaroeIsland;
                case "FRANCE":
                    return TaxJurisdiction.France;
                case "GERMANY":
                    return TaxJurisdiction.Germany;
                case "GIBRALTAR":
                    return TaxJurisdiction.Gibraltar;
                case "GREECE":
                    return TaxJurisdiction.Greece;
                case "GUERNSEY":
                    return TaxJurisdiction.Guernsey;
                case "HONG KONG":
                    return TaxJurisdiction.HongKong;
                case "HUNGARY":
                    return TaxJurisdiction.Hungary;
                case "ICELAND":
                    return TaxJurisdiction.Iceland;
                case "INDIA":
                    return TaxJurisdiction.India;
                case "INDONESIA":
                    return TaxJurisdiction.Indonesia;
                case "IRELAND":
                    return TaxJurisdiction.Ireland;
                case "ISLE OF MAN":
                    return TaxJurisdiction.IsleOfMan;
                case "ISRAEL":
                    return TaxJurisdiction.Israel;
                case "ITALY":
                    return TaxJurisdiction.Italy;
                case "JAPAN":
                    return TaxJurisdiction.Japan;
                case "JERSEY":
                    return TaxJurisdiction.Jersey;
                case "KAZAKHSTAN":
                    return TaxJurisdiction.Kazakhstan;
                case "KUWAIT":
                    return TaxJurisdiction.Kuwait;
                case "KOREA, REPUBLIC OF":
                    return TaxJurisdiction.KoreaRepublicOf;
                case "LIBERIA":
                    return TaxJurisdiction.Liberia;
                case "LIECHTENSTEIN":
                    return TaxJurisdiction.Liechtenstein;
                case "LITHUANIA":
                    return TaxJurisdiction.Lithuania;
                case "LUXEMBOURG":
                    return TaxJurisdiction.Luxembourg;
                case "MALAYSIA":
                    return TaxJurisdiction.Malaysia;
                case "MARSHALL ISLANDS":
                    return TaxJurisdiction.MarshallIslands;
                case "MALTA":
                    return TaxJurisdiction.Malta;
                case "MEXICO":
                    return TaxJurisdiction.Mexico;
                case "NETHERLANDS":
                    return TaxJurisdiction.Netherlands;
                case "NEW ZEALAND":
                    return TaxJurisdiction.NewZealand;
                case "NIGERIA":
                    return TaxJurisdiction.Nigeria;  
                case "NORWAY":
                    return TaxJurisdiction.Norway;
                case "PAKISTAN":
                    return TaxJurisdiction.Pakistan;
                case "PANAMA":
                    return TaxJurisdiction.Panama;
                case "PAPUA NEW GUINEA":
                    return TaxJurisdiction.PapuaNewGuinea;
                case "PERU":
                    return TaxJurisdiction.Peru;
                case "PHILIPPINES":
                    return TaxJurisdiction.Philippines;
                case "POLAND":
                    return TaxJurisdiction.Poland;
                case "PORTUGAL":
                    return TaxJurisdiction.Portugal;
                case "PUERTO RICO":
                    return TaxJurisdiction.PuertoRico;
                case "QATAR":
                    return TaxJurisdiction.Qatar;
                case "RUSSIAN FEDERATION":
                    return TaxJurisdiction.RussianFederation;
                case "ROMANIA":
                    return TaxJurisdiction.Romania;
                case "SAUDI ARABIA":
                    return TaxJurisdiction.SaudiArabia;
                case "SINGAPORE":
                    return TaxJurisdiction.Singapore;
                case "SLOVENIA":
                    return TaxJurisdiction.Slovenia;
                case "SOUTH AFRICA":
                    return TaxJurisdiction.SouthAfrica;
                case "SPAIN":
                    return TaxJurisdiction.Spain;
                case "SWEDEN":
                    return TaxJurisdiction.Sweden;
                case "SWITZERLAND":
                    return TaxJurisdiction.Switzerland;
                case "TAIWAN, PROVINCE OF CHINA":
                    return TaxJurisdiction.TaiwanProvinceOfChina;
                case "THAILAND":
                    return TaxJurisdiction.Thailand;
                case "TURKEY":
                    return TaxJurisdiction.Turkey;
                case "TURKIYE":
                    return TaxJurisdiction.Turkey;       
                case "UNITED ARAB EMIRATES":
                    return TaxJurisdiction.UnitedArabEmirates;
                case "UNITED KINGDOM":
                    return TaxJurisdiction.UnitedKingdom;
                case "UK":
                    return TaxJurisdiction.UnitedKingdom;
                case "UNITED STATES":
                    return TaxJurisdiction.UnitedStates;
                case "VIRGIN ISLANDS, BRITISH":
                    return TaxJurisdiction.VirginIslandsBritish;
            }
            throw new Exception("Cannot unmarshal type TaxJurisdiction");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TaxJurisdiction)untypedValue;
            switch (value)
            {
                case TaxJurisdiction.Argentina:
                    serializer.Serialize(writer, "ARGENTINA");
                    return;
                case TaxJurisdiction.Australia:
                    serializer.Serialize(writer, "AUSTRALIA");
                    return;
                case TaxJurisdiction.Austria:
                    serializer.Serialize(writer, "AUSTRIA");
                    return;
                case TaxJurisdiction.Bahamas:
                    serializer.Serialize(writer, "BAHAMAS");
                    return;
                case TaxJurisdiction.Bahrain:
                    serializer.Serialize(writer, "BAHRAIN");
                    return;
                case TaxJurisdiction.Belgium:
                    serializer.Serialize(writer, "BELGIUM");
                    return;
                case TaxJurisdiction.Bermuda:
                    serializer.Serialize(writer, "BERMUDA");
                    return;
                case TaxJurisdiction.Brazil:
                    serializer.Serialize(writer, "BRAZIL");
                    return;
                case TaxJurisdiction.Canada:
                    serializer.Serialize(writer, "CANADA");
                    return;
                case TaxJurisdiction.CaymanIslands:
                    serializer.Serialize(writer, "CAYMAN ISLANDS");
                    return;
                case TaxJurisdiction.Chile:
                    serializer.Serialize(writer, "CHILE");
                    return;
                case TaxJurisdiction.China:
                    serializer.Serialize(writer, "CHINA");
                    return;
                case TaxJurisdiction.Colombia:
                    serializer.Serialize(writer, "COLOMBIA");
                    return;
                case TaxJurisdiction.Curacao:
                    serializer.Serialize(writer, "CURACAO");
                    return;
                case TaxJurisdiction.Cyprus:
                    serializer.Serialize(writer, "CYPRUS");
                    return;
                case TaxJurisdiction.CzechRepublic:
                    serializer.Serialize(writer, "CZECH REPUBLIC");
                    return;
                case TaxJurisdiction.Denmark:
                    serializer.Serialize(writer, "DENMARK");
                    return;
                case TaxJurisdiction.Egypt:
                    serializer.Serialize(writer, "EGYPT");
                    return;
                case TaxJurisdiction.Finland:
                    serializer.Serialize(writer, "FINLAND");
                    return;
                case TaxJurisdiction.FaroeIsland:
                    serializer.Serialize(writer, "FAROE ISLANDS");
                    return;
                case TaxJurisdiction.France:
                    serializer.Serialize(writer, "FRANCE");
                    return;
                case TaxJurisdiction.Germany:
                    serializer.Serialize(writer, "GERMANY");
                    return;
                case TaxJurisdiction.Gibraltar:
                    serializer.Serialize(writer, "GIBRALTAR");
                    return;
                case TaxJurisdiction.Greece:
                    serializer.Serialize(writer, "GREECE");
                    return;
                case TaxJurisdiction.Guernsey:
                    serializer.Serialize(writer, "GUERNSEY");
                    return;
                case TaxJurisdiction.HongKong:
                    serializer.Serialize(writer, "HONG KONG");
                    return;
                case TaxJurisdiction.Hungary:
                    serializer.Serialize(writer, "HUNGARY");
                    return;
                case TaxJurisdiction.Iceland:
                    serializer.Serialize(writer, "ICELAND");
                    return;
                case TaxJurisdiction.India:
                    serializer.Serialize(writer, "INDIA");
                    return;
                case TaxJurisdiction.Indonesia:
                    serializer.Serialize(writer, "INDONESIA");
                    return;
                case TaxJurisdiction.Ireland:
                    serializer.Serialize(writer, "IRELAND");
                    return;
                case TaxJurisdiction.IsleOfMan:
                    serializer.Serialize(writer, "ISLE OF MAN");
                    return;
                case TaxJurisdiction.Israel:
                    serializer.Serialize(writer, "ISRAEL");
                    return;
                case TaxJurisdiction.Italy:
                    serializer.Serialize(writer, "ITALY");
                    return;
                case TaxJurisdiction.Japan:
                    serializer.Serialize(writer, "JAPAN");
                    return;
                case TaxJurisdiction.Jersey:
                    serializer.Serialize(writer, "JERSEY");
                    return;
                case TaxJurisdiction.Kazakhstan:
                    serializer.Serialize(writer, "KAZAKHSTAN");
                    return;
                case TaxJurisdiction.KoreaRepublicOf:
                    serializer.Serialize(writer, "KOREA, REPUBLIC OF");
                    return;
                case TaxJurisdiction.Kuwait:
                    serializer.Serialize(writer, "KUWAIT");
                    return;
                case TaxJurisdiction.Liberia:
                    serializer.Serialize(writer, "LIBERIA");
                    return;
                case TaxJurisdiction.Liechtenstein:
                    serializer.Serialize(writer, "LIECHTENSTEIN");
                    return;
                case TaxJurisdiction.Lithuania:
                    serializer.Serialize(writer, "LITHUANIA");
                    return;
                case TaxJurisdiction.Luxembourg:
                    serializer.Serialize(writer, "LUXEMBOURG");
                    return;
                case TaxJurisdiction.Malaysia:
                    serializer.Serialize(writer, "MALAYSIA");
                    return;
                case TaxJurisdiction.Malta:
                    serializer.Serialize(writer, "MALTA");
                    return;
                case TaxJurisdiction.MarshallIslands:
                    serializer.Serialize(writer, "MARSHALL ISLANDS");
                    return;
                case TaxJurisdiction.Mexico:
                    serializer.Serialize(writer, "MEXICO");
                    return;
                case TaxJurisdiction.Netherlands:
                    serializer.Serialize(writer, "NETHERLANDS");
                    return;
                case TaxJurisdiction.NewZealand:
                    serializer.Serialize(writer, "NEW ZEALAND");
                    return;
                case TaxJurisdiction.Nigeria:
                    serializer.Serialize(writer, "NIGERIA");
                    return;
                case TaxJurisdiction.Norway:
                    serializer.Serialize(writer, "NORWAY");
                    return;
                case TaxJurisdiction.Pakistan:
                    serializer.Serialize(writer, "PAKISTAN");
                    return;
                case TaxJurisdiction.Panama:
                    serializer.Serialize(writer, "PANAMA");
                    return;
                case TaxJurisdiction.PapuaNewGuinea:
                    serializer.Serialize(writer, "PAPUA NEW GUINEA");
                    return;
                case TaxJurisdiction.Peru:
                    serializer.Serialize(writer, "PERU");
                    return;
                case TaxJurisdiction.Philippines:
                    serializer.Serialize(writer, "PHILIPPINES");
                    return;
                case TaxJurisdiction.Poland:
                    serializer.Serialize(writer, "POLAND");
                    return;
                case TaxJurisdiction.Portugal:
                    serializer.Serialize(writer, "PORTUGAL");
                    return;
                case TaxJurisdiction.PuertoRico:
                    serializer.Serialize(writer, "PUERTO RICO");
                    return;
                case TaxJurisdiction.Qatar:
                    serializer.Serialize(writer, "QATAR");
                    return;
                case TaxJurisdiction.RussianFederation:
                    serializer.Serialize(writer, "RUSSIAN FEDERATION");
                    return;
                case TaxJurisdiction.Romania:
                    serializer.Serialize(writer, "ROMANIA");
                    return;
                case TaxJurisdiction.SaudiArabia:
                    serializer.Serialize(writer, "SAUDI ARABIA");
                    return;
                case TaxJurisdiction.Singapore:
                    serializer.Serialize(writer, "SINGAPORE");
                    return;
                case TaxJurisdiction.Slovenia:
                    serializer.Serialize(writer, "SLOVENIA");
                    return;
                case TaxJurisdiction.SouthAfrica:
                    serializer.Serialize(writer, "SOUTH AFRICA");
                    return;
                case TaxJurisdiction.Spain:
                    serializer.Serialize(writer, "SPAIN");
                    return;
                case TaxJurisdiction.Sweden:
                    serializer.Serialize(writer, "SWEDEN");
                    return;
                case TaxJurisdiction.Switzerland:
                    serializer.Serialize(writer, "SWITZERLAND");
                    return;
                case TaxJurisdiction.TaiwanProvinceOfChina:
                    serializer.Serialize(writer, "TAIWAN, PROVINCE OF CHINA");
                    return;
                case TaxJurisdiction.Thailand:
                    serializer.Serialize(writer, "THAILAND");
                    return;
                case TaxJurisdiction.Turkey:
                    serializer.Serialize(writer, "TURKEY");
                    return;
                case TaxJurisdiction.UnitedArabEmirates:
                    serializer.Serialize(writer, "UNITED ARAB EMIRATES");
                    return;
                case TaxJurisdiction.UnitedKingdom:
                    serializer.Serialize(writer, "UNITED KINGDOM");
                    return;
                case TaxJurisdiction.UnitedStates:
                    serializer.Serialize(writer, "UNITED STATES");
                    return;
                case TaxJurisdiction.VirginIslandsBritish:
                    serializer.Serialize(writer, "VIRGIN ISLANDS, BRITISH");
                    return;
            }
            throw new Exception("Cannot marshal type TaxJurisdiction");
        }

        public static readonly TaxJurisdictionConverter Singleton = new TaxJurisdictionConverter();
    }

    internal class TaxJurisdictionCountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TaxJurisdictionCountryCode) || t == typeof(TaxJurisdictionCountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AE":
                    return TaxJurisdictionCountryCode.Ae;
                case "AR":
                    return TaxJurisdictionCountryCode.Ar;
                case "AT":
                    return TaxJurisdictionCountryCode.At;
                case "AU":
                    return TaxJurisdictionCountryCode.Au;
                case "BE":
                    return TaxJurisdictionCountryCode.Be;
                case "BH":
                    return TaxJurisdictionCountryCode.Bh;
                case "BM":
                    return TaxJurisdictionCountryCode.Bm;
                case "BR":
                    return TaxJurisdictionCountryCode.Br;
                case "BS":
                    return TaxJurisdictionCountryCode.Bs;
                case "CA":
                    return TaxJurisdictionCountryCode.Ca;
                case "CH":
                    return TaxJurisdictionCountryCode.Ch;
                case "CL":
                    return TaxJurisdictionCountryCode.Cl;
                case "CN":
                    return TaxJurisdictionCountryCode.Cn;
                case "CO":
                    return TaxJurisdictionCountryCode.Co;
                case "CW":
                    return TaxJurisdictionCountryCode.Cw;
                case "CY":
                    return TaxJurisdictionCountryCode.Cy;
                case "CZ":
                    return TaxJurisdictionCountryCode.Cz;
                case "DE":
                    return TaxJurisdictionCountryCode.De;
                case "DK":
                    return TaxJurisdictionCountryCode.Dk;
                case "EG":
                    return TaxJurisdictionCountryCode.Eg;
                case "ES":
                    return TaxJurisdictionCountryCode.Es;
                case "FI":
                    return TaxJurisdictionCountryCode.Fi;
                case "FR":
                    return TaxJurisdictionCountryCode.Fr;
                case "FO":
                    return TaxJurisdictionCountryCode.Fo;
                case "GB":
                    return TaxJurisdictionCountryCode.Gb;
                case "GG":
                    return TaxJurisdictionCountryCode.Gg;
                case "GI":
                    return TaxJurisdictionCountryCode.Gi;
                case "GR":
                    return TaxJurisdictionCountryCode.Gr;
                case "HK":
                    return TaxJurisdictionCountryCode.Hk;
                case "HU":
                    return TaxJurisdictionCountryCode.Hu;
                case "ID":
                    return TaxJurisdictionCountryCode.Id;
                case "IE":
                    return TaxJurisdictionCountryCode.Ie;
                case "IL":
                    return TaxJurisdictionCountryCode.Il;
                case "IM":
                    return TaxJurisdictionCountryCode.Im;
                case "IN":
                    return TaxJurisdictionCountryCode.In;
                case "IS":
                    return TaxJurisdictionCountryCode.Is;
                case "IT":
                    return TaxJurisdictionCountryCode.It;
                case "JE":
                    return TaxJurisdictionCountryCode.Je;
                case "JP":
                    return TaxJurisdictionCountryCode.Jp;
                case "KR":
                    return TaxJurisdictionCountryCode.Kr;
                case "KY":
                    return TaxJurisdictionCountryCode.Ky;
                case "KW":
                    return TaxJurisdictionCountryCode.Kw;
                case "KZ":
                    return TaxJurisdictionCountryCode.Kz;
                case "LI":
                    return TaxJurisdictionCountryCode.Li;
                case "LR":
                    return TaxJurisdictionCountryCode.Lr;
                case "LT":
                    return TaxJurisdictionCountryCode.Lt;
                case "LU":
                    return TaxJurisdictionCountryCode.Lu;
                case "MH":
                    return TaxJurisdictionCountryCode.Mh;
                case "MT":
                    return TaxJurisdictionCountryCode.Mt;
                case "MX":
                    return TaxJurisdictionCountryCode.Mx;
                case "MY":
                    return TaxJurisdictionCountryCode.My;
                case "NG":
                    return TaxJurisdictionCountryCode.Ng;
                case "NL":
                    return TaxJurisdictionCountryCode.Nl;
                case "NO":
                    return TaxJurisdictionCountryCode.No;
                case "NZ":
                    return TaxJurisdictionCountryCode.Nz;
                case "PA":
                    return TaxJurisdictionCountryCode.Pa;
                case "PE":
                    return TaxJurisdictionCountryCode.Pe;
                case "PG":
                    return TaxJurisdictionCountryCode.Pg;
                case "PH":
                    return TaxJurisdictionCountryCode.Ph;
                case "PK":
                    return TaxJurisdictionCountryCode.Pk;
                case "PL":
                    return TaxJurisdictionCountryCode.Pl;
                case "PR":
                    return TaxJurisdictionCountryCode.Pr;
                case "PT":
                    return TaxJurisdictionCountryCode.Pt;
                case "QA":
                    return TaxJurisdictionCountryCode.Qa;
                case "RU":
                    return TaxJurisdictionCountryCode.Ru;
                case "RO":
                    return TaxJurisdictionCountryCode.Ro;
                case "SA":
                    return TaxJurisdictionCountryCode.Sa;
                case "SE":
                    return TaxJurisdictionCountryCode.Se;
                case "SI":
                    return TaxJurisdictionCountryCode.Si;
                case "SG":
                    return TaxJurisdictionCountryCode.Sg;
                case "TH":
                    return TaxJurisdictionCountryCode.Th;
                case "TR":
                    return TaxJurisdictionCountryCode.Tr;
                case "TW":
                    return TaxJurisdictionCountryCode.Tw;
                case "US":
                    return TaxJurisdictionCountryCode.Us;
                case "VG":
                    return TaxJurisdictionCountryCode.Vg;
                case "ZA":
                    return TaxJurisdictionCountryCode.Za;
            }
            throw new Exception("Cannot unmarshal type TaxJurisdictionCountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TaxJurisdictionCountryCode)untypedValue;
            switch (value)
            {
                case TaxJurisdictionCountryCode.Ae:
                    serializer.Serialize(writer, "AE");
                    return;
                case TaxJurisdictionCountryCode.Ar:
                    serializer.Serialize(writer, "AR");
                    return;
                case TaxJurisdictionCountryCode.At:
                    serializer.Serialize(writer, "AT");
                    return;
                case TaxJurisdictionCountryCode.Au:
                    serializer.Serialize(writer, "AU");
                    return;
                case TaxJurisdictionCountryCode.Be:
                    serializer.Serialize(writer, "BE");
                    return;
                case TaxJurisdictionCountryCode.Bh:
                    serializer.Serialize(writer, "BH");
                    return;
                case TaxJurisdictionCountryCode.Bm:
                    serializer.Serialize(writer, "BM");
                    return;
                case TaxJurisdictionCountryCode.Br:
                    serializer.Serialize(writer, "BR");
                    return;
                case TaxJurisdictionCountryCode.Bs:
                    serializer.Serialize(writer, "BS");
                    return;
                case TaxJurisdictionCountryCode.Ca:
                    serializer.Serialize(writer, "CA");
                    return;
                case TaxJurisdictionCountryCode.Ch:
                    serializer.Serialize(writer, "CH");
                    return;
                case TaxJurisdictionCountryCode.Cl:
                    serializer.Serialize(writer, "CL");
                    return;
                case TaxJurisdictionCountryCode.Cn:
                    serializer.Serialize(writer, "CN");
                    return;
                case TaxJurisdictionCountryCode.Co:
                    serializer.Serialize(writer, "CO");
                    return;
                case TaxJurisdictionCountryCode.Cw:
                    serializer.Serialize(writer, "CW");
                    return;
                case TaxJurisdictionCountryCode.Cy:
                    serializer.Serialize(writer, "CY");
                    return;
                case TaxJurisdictionCountryCode.Cz:
                    serializer.Serialize(writer, "CZ");
                    return;
                case TaxJurisdictionCountryCode.De:
                    serializer.Serialize(writer, "DE");
                    return;
                case TaxJurisdictionCountryCode.Dk:
                    serializer.Serialize(writer, "DK");
                    return;
                case TaxJurisdictionCountryCode.Eg:
                    serializer.Serialize(writer, "EG");
                    return;
                case TaxJurisdictionCountryCode.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case TaxJurisdictionCountryCode.Fi:
                    serializer.Serialize(writer, "FI");
                    return;
                case TaxJurisdictionCountryCode.Fr:
                    serializer.Serialize(writer, "FR");
                    return;
                case TaxJurisdictionCountryCode.Fo:
                    serializer.Serialize(writer, "FO");
                    return;
                case TaxJurisdictionCountryCode.Gb:
                    serializer.Serialize(writer, "GB");
                    return;
                case TaxJurisdictionCountryCode.Gg:
                    serializer.Serialize(writer, "GG");
                    return;
                case TaxJurisdictionCountryCode.Gi:
                    serializer.Serialize(writer, "GI");
                    return;
                case TaxJurisdictionCountryCode.Gr:
                    serializer.Serialize(writer, "GR");
                    return;
                case TaxJurisdictionCountryCode.Hk:
                    serializer.Serialize(writer, "HK");
                    return;
                case TaxJurisdictionCountryCode.Hu:
                    serializer.Serialize(writer, "HU");
                    return;
                case TaxJurisdictionCountryCode.Id:
                    serializer.Serialize(writer, "ID");
                    return;
                case TaxJurisdictionCountryCode.Ie:
                    serializer.Serialize(writer, "IE");
                    return;
                case TaxJurisdictionCountryCode.Il:
                    serializer.Serialize(writer, "IL");
                    return;
                case TaxJurisdictionCountryCode.Im:
                    serializer.Serialize(writer, "IM");
                    return;
                case TaxJurisdictionCountryCode.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case TaxJurisdictionCountryCode.Is:
                    serializer.Serialize(writer, "IS");
                    return;
                case TaxJurisdictionCountryCode.It:
                    serializer.Serialize(writer, "IT");
                    return;
                case TaxJurisdictionCountryCode.Je:
                    serializer.Serialize(writer, "JE");
                    return;
                case TaxJurisdictionCountryCode.Jp:
                    serializer.Serialize(writer, "JP");
                    return;
                case TaxJurisdictionCountryCode.Kr:
                    serializer.Serialize(writer, "KR");
                    return;
                case TaxJurisdictionCountryCode.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case TaxJurisdictionCountryCode.Kz:
                    serializer.Serialize(writer, "KZ");
                    return;
                case TaxJurisdictionCountryCode.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case TaxJurisdictionCountryCode.Li:
                    serializer.Serialize(writer, "LI");
                    return;
                case TaxJurisdictionCountryCode.Lr:
                    serializer.Serialize(writer, "LR");
                    return;
                case TaxJurisdictionCountryCode.Lt:
                    serializer.Serialize(writer, "LT");
                    return;
                case TaxJurisdictionCountryCode.Lu:
                    serializer.Serialize(writer, "LU");
                    return;
                case TaxJurisdictionCountryCode.Mh:
                    serializer.Serialize(writer, "MH");
                    return;
                case TaxJurisdictionCountryCode.Mt:
                    serializer.Serialize(writer, "MT");
                    return;
                case TaxJurisdictionCountryCode.Mx:
                    serializer.Serialize(writer, "MX");
                    return;
                case TaxJurisdictionCountryCode.My:
                    serializer.Serialize(writer, "MY");
                    return;
                case TaxJurisdictionCountryCode.Ng:
                    serializer.Serialize(writer, "NG");
                    return;
                case TaxJurisdictionCountryCode.Nl:
                    serializer.Serialize(writer, "NL");
                    return;
                case TaxJurisdictionCountryCode.No:
                    serializer.Serialize(writer, "NO");
                    return;
                case TaxJurisdictionCountryCode.Nz:
                    serializer.Serialize(writer, "NZ");
                    return;
                case TaxJurisdictionCountryCode.Pa:
                    serializer.Serialize(writer, "PA");
                    return;
                case TaxJurisdictionCountryCode.Pe:
                    serializer.Serialize(writer, "PE");
                    return;
                case TaxJurisdictionCountryCode.Pg:
                    serializer.Serialize(writer, "PG");
                    return;
                case TaxJurisdictionCountryCode.Ph:
                    serializer.Serialize(writer, "PH");
                    return;
                case TaxJurisdictionCountryCode.Pk:
                    serializer.Serialize(writer, "PK");
                    return;
                case TaxJurisdictionCountryCode.Pl:
                    serializer.Serialize(writer, "PL");
                    return;
                case TaxJurisdictionCountryCode.Pr:
                    serializer.Serialize(writer, "PR");
                    return;
                case TaxJurisdictionCountryCode.Pt:
                    serializer.Serialize(writer, "PT");
                    return;
                case TaxJurisdictionCountryCode.Qa:
                    serializer.Serialize(writer, "QA");
                    return;
                case TaxJurisdictionCountryCode.Ru:
                    serializer.Serialize(writer, "RU");
                    return;
                case TaxJurisdictionCountryCode.Ro:
                    serializer.Serialize(writer, "RO");
                    return;
                case TaxJurisdictionCountryCode.Sa:
                    serializer.Serialize(writer, "SA");
                    return;
                case TaxJurisdictionCountryCode.Se:
                    serializer.Serialize(writer, "SE");
                    return;
                case TaxJurisdictionCountryCode.Si:
                    serializer.Serialize(writer, "SI");
                    return;
                case TaxJurisdictionCountryCode.Sg:
                    serializer.Serialize(writer, "SG");
                    return;
                case TaxJurisdictionCountryCode.Th:
                    serializer.Serialize(writer, "TH");
                    return;
                case TaxJurisdictionCountryCode.Tr:
                    serializer.Serialize(writer, "TR");
                    return;
                case TaxJurisdictionCountryCode.Tw:
                    serializer.Serialize(writer, "TW");
                    return;
                case TaxJurisdictionCountryCode.Us:
                    serializer.Serialize(writer, "US");
                    return;
                case TaxJurisdictionCountryCode.Vg:
                    serializer.Serialize(writer, "VG");
                    return;
                case TaxJurisdictionCountryCode.Za:
                    serializer.Serialize(writer, "ZA");
                    return;
            }
            throw new Exception("Cannot marshal type TaxJurisdictionCountryCode");
        }

        public static readonly TaxJurisdictionCountryCodeConverter Singleton = new TaxJurisdictionCountryCodeConverter();
    }
}
